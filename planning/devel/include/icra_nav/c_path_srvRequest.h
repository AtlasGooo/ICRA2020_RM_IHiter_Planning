// Generated by gencpp from file icra_nav/c_path_srvRequest.msg
// DO NOT EDIT!


#ifndef ICRA_NAV_MESSAGE_C_PATH_SRVREQUEST_H
#define ICRA_NAV_MESSAGE_C_PATH_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace icra_nav
{
template <class ContainerAllocator>
struct c_path_srvRequest_
{
  typedef c_path_srvRequest_<ContainerAllocator> Type;

  c_path_srvRequest_()
    : vfPathPositionX()
    , vfPathPositionY()
    , vfConstraintPositionX()
    , vfConstraintPositionY()  {
    }
  c_path_srvRequest_(const ContainerAllocator& _alloc)
    : vfPathPositionX(_alloc)
    , vfPathPositionY(_alloc)
    , vfConstraintPositionX(_alloc)
    , vfConstraintPositionY(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vfPathPositionX_type;
  _vfPathPositionX_type vfPathPositionX;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vfPathPositionY_type;
  _vfPathPositionY_type vfPathPositionY;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vfConstraintPositionX_type;
  _vfConstraintPositionX_type vfConstraintPositionX;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vfConstraintPositionY_type;
  _vfConstraintPositionY_type vfConstraintPositionY;





  typedef boost::shared_ptr< ::icra_nav::c_path_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icra_nav::c_path_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct c_path_srvRequest_

typedef ::icra_nav::c_path_srvRequest_<std::allocator<void> > c_path_srvRequest;

typedef boost::shared_ptr< ::icra_nav::c_path_srvRequest > c_path_srvRequestPtr;
typedef boost::shared_ptr< ::icra_nav::c_path_srvRequest const> c_path_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icra_nav::c_path_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace icra_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'icra_nav': ['/home/dengxin/icra2020/src/icra_nav/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icra_nav::c_path_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_nav::c_path_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_nav::c_path_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddebee3298e49f5d11b48cb63bc7aaff";
  }

  static const char* value(const ::icra_nav::c_path_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddebee3298e49f5dULL;
  static const uint64_t static_value2 = 0x11b48cb63bc7aaffULL;
};

template<class ContainerAllocator>
struct DataType< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icra_nav/c_path_srvRequest";
  }

  static const char* value(const ::icra_nav::c_path_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] vfPathPositionX\n\
float32[] vfPathPositionY\n\
float32[] vfConstraintPositionX\n\
float32[] vfConstraintPositionY\n\
";
  }

  static const char* value(const ::icra_nav::c_path_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vfPathPositionX);
      stream.next(m.vfPathPositionY);
      stream.next(m.vfConstraintPositionX);
      stream.next(m.vfConstraintPositionY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct c_path_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icra_nav::c_path_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icra_nav::c_path_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "vfPathPositionX[]" << std::endl;
    for (size_t i = 0; i < v.vfPathPositionX.size(); ++i)
    {
      s << indent << "  vfPathPositionX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vfPathPositionX[i]);
    }
    s << indent << "vfPathPositionY[]" << std::endl;
    for (size_t i = 0; i < v.vfPathPositionY.size(); ++i)
    {
      s << indent << "  vfPathPositionY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vfPathPositionY[i]);
    }
    s << indent << "vfConstraintPositionX[]" << std::endl;
    for (size_t i = 0; i < v.vfConstraintPositionX.size(); ++i)
    {
      s << indent << "  vfConstraintPositionX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vfConstraintPositionX[i]);
    }
    s << indent << "vfConstraintPositionY[]" << std::endl;
    for (size_t i = 0; i < v.vfConstraintPositionY.size(); ++i)
    {
      s << indent << "  vfConstraintPositionY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vfConstraintPositionY[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICRA_NAV_MESSAGE_C_PATH_SRVREQUEST_H
