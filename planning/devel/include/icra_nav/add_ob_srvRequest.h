// Generated by gencpp from file icra_nav/add_ob_srvRequest.msg
// DO NOT EDIT!


#ifndef ICRA_NAV_MESSAGE_ADD_OB_SRVREQUEST_H
#define ICRA_NAV_MESSAGE_ADD_OB_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace icra_nav
{
template <class ContainerAllocator>
struct add_ob_srvRequest_
{
  typedef add_ob_srvRequest_<ContainerAllocator> Type;

  add_ob_srvRequest_()
    : inFrom(0)
    , inTo(0)
    , flObstacleX(0.0)
    , flObstacleY(0.0)  {
    }
  add_ob_srvRequest_(const ContainerAllocator& _alloc)
    : inFrom(0)
    , inTo(0)
    , flObstacleX(0.0)
    , flObstacleY(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _inFrom_type;
  _inFrom_type inFrom;

   typedef int32_t _inTo_type;
  _inTo_type inTo;

   typedef float _flObstacleX_type;
  _flObstacleX_type flObstacleX;

   typedef float _flObstacleY_type;
  _flObstacleY_type flObstacleY;





  typedef boost::shared_ptr< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct add_ob_srvRequest_

typedef ::icra_nav::add_ob_srvRequest_<std::allocator<void> > add_ob_srvRequest;

typedef boost::shared_ptr< ::icra_nav::add_ob_srvRequest > add_ob_srvRequestPtr;
typedef boost::shared_ptr< ::icra_nav::add_ob_srvRequest const> add_ob_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icra_nav::add_ob_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace icra_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'icra_nav': ['/home/dengxin/icra2020/src/icra_nav/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d93f2e9fe1d31bb11620b319b9e7db3";
  }

  static const char* value(const ::icra_nav::add_ob_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d93f2e9fe1d31bbULL;
  static const uint64_t static_value2 = 0x11620b319b9e7db3ULL;
};

template<class ContainerAllocator>
struct DataType< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icra_nav/add_ob_srvRequest";
  }

  static const char* value(const ::icra_nav::add_ob_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 inFrom\n\
int32 inTo\n\
float32 flObstacleX\n\
float32 flObstacleY\n\
";
  }

  static const char* value(const ::icra_nav::add_ob_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inFrom);
      stream.next(m.inTo);
      stream.next(m.flObstacleX);
      stream.next(m.flObstacleY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct add_ob_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icra_nav::add_ob_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icra_nav::add_ob_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "inFrom: ";
    Printer<int32_t>::stream(s, indent + "  ", v.inFrom);
    s << indent << "inTo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.inTo);
    s << indent << "flObstacleX: ";
    Printer<float>::stream(s, indent + "  ", v.flObstacleX);
    s << indent << "flObstacleY: ";
    Printer<float>::stream(s, indent + "  ", v.flObstacleY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICRA_NAV_MESSAGE_ADD_OB_SRVREQUEST_H
